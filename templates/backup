from flask import (
    Flask,
    render_template,
    request,
    redirect,
    url_for,
    session,
    Response,
)
import os
import json
import random
import uuid
import time

app = Flask(__name__)
app.secret_key = os.urandom(24)

answers = {}
players = []
show_answers = False
lock_answers = False


@app.route("/", methods=["GET", "POST"])
def index():
    # Generate a unique client_id if not already present in session
    session.setdefault("client_id", str(uuid.uuid4()))
    client_id = session["client_id"]

    if request.method == "POST":
        global lock_answers
        if lock_answers:
            return redirect(url_for("index"))
        answer = request.form.get("answer")
        if answer:
            answers[client_id] = {"answer": answer, "active": True}  # Store the answer
            session["answer"] = answer

        return redirect(url_for("index"))

    return render_template("index.html", current_answer=session.get("answer"))


@app.route("/manage")
def manage():
    ordered_players = sorted(players, key=lambda p: p["score"], reverse=True)
    return render_template(
        "manage.html",
        answers=answers.values(),
        players=ordered_players,
        total_players=len(players),
        total_answers=len(answers),
        show_answers=show_answers,
        lock_answers=lock_answers,
    )


@app.route("/clear")
def clear():
    answers.clear()
    for player in players:
        player["active"] = True
    return redirect(url_for("manage"))


@app.route("/toggle_lock")
def toggle_lock():
    global lock_answers
    lock_answers = not lock_answers
    return redirect(url_for("manage"))


@app.route("/toggle_show")
def toggle_show():
    global show_answers
    show_answers = not show_answers
    return redirect(url_for("manage"))


@app.route("/add_player", methods=["GET", "POST"])
def add_player():
    player_name = request.form.get("player_name")
    if request.method == "POST":
        player_name = request.form["player_name"]
        players.append({"name": player_name, "score": 0, "active": True})
        return redirect(url_for("add_player"))

    return render_template("add_player.html")


@app.route("/increase_score", methods=["POST"])
def increase_score():
    player_name = request.args.get("player_name")
    for player in players:
        if player["name"] == player_name:
            player["score"] += 1
            break
    return redirect(url_for("manage"))


@app.route("/toggle_active", methods=["POST"])
def toggle_active():
    player_name = request.args.get("player_name")
    for player in players:
        if player["name"] == player_name:
            player["active"] = not player["active"]
            break
    return redirect(url_for("manage"))


@app.route("/toggle_answer", methods=["POST"])
def toggle_answer():
    answer_name = request.args.get("answer_name")
    for answer in answers.values():
        if answer["answer"] == answer_name:
            answer["active"] = not answer["active"]
            break
    return redirect(url_for("manage"))


@app.route("/total_answers_stream")
def total_answers_stream():
    def stream():
        while True:
            data = len(answers)
            yield f"data: {data}\n\n"
            time.sleep(1)

    return Response(stream(), mimetype="text/event-stream")


if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=False)
